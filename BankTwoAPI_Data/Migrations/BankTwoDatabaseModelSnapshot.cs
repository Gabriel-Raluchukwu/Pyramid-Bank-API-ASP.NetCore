// <auto-generated />
using System;
using BankTwoAPI_Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BankTwoAPI_Data.Migrations
{
    [DbContext(typeof(BankTwoDatabase))]
    partial class BankTwoDatabaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BankTwoAPI_Entities.Models.AccountCustomerCategory", b =>
                {
                    b.Property<int>("CustomerAccountId");

                    b.Property<int>("CustomerId");

                    b.HasKey("CustomerAccountId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("AccountCustomerCategories");
                });

            modelBuilder.Entity("BankTwoAPI_Entities.Models.AirTimeTopUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CustomerAccountId");

                    b.Property<string>("CustomerAccountNumber");

                    b.Property<bool>("IsActive");

                    b.Property<int>("MobileNetworksId");

                    b.Property<string>("MobileNumber");

                    b.HasKey("Id");

                    b.HasIndex("CustomerAccountId");

                    b.HasIndex("MobileNetworksId");

                    b.ToTable("AirTimeTopUp");
                });

            modelBuilder.Entity("BankTwoAPI_Entities.Models.Banks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankFullName");

                    b.Property<int>("BankIdentificationCode");

                    b.Property<string>("BankShortName");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("LastUpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Banks");

                    b.HasData(
                        new { Id = 1, BankFullName = "Access Bank", BankIdentificationCode = 86428357, BankShortName = "Access Bank", CreatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, LastUpdatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 2, BankFullName = "Fidelity Bank", BankIdentificationCode = 15090085, BankShortName = "Fidelity Bank", CreatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, LastUpdatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 3, BankFullName = "First Bank of Nigeria Limited", BankIdentificationCode = 49968453, BankShortName = "First Bank", CreatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, LastUpdatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 4, BankFullName = "Guaranty Trust Bank Plc", BankIdentificationCode = 12039523, BankShortName = "Guaranty Trust Bank", CreatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, LastUpdatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 5, BankFullName = "Union Bank for Africa Plc", BankIdentificationCode = 42359561, BankShortName = "Union Bank", CreatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, LastUpdatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 6, BankFullName = "Zenith Bank Plc", BankIdentificationCode = 60412621, BankShortName = "Zenith Bank", CreatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, LastUpdatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 7, BankFullName = "Ecobank Nigeria Plc", BankIdentificationCode = 49546921, BankShortName = "Eco Bank", CreatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, LastUpdatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 8, BankFullName = "Diamond Bank Plc", BankIdentificationCode = 75473128, BankShortName = "Diamond Bank", CreatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, LastUpdatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 9, BankFullName = "Stanbic IBTC Bank Plc", BankIdentificationCode = 58811713, BankShortName = "Stanbic IBTC Bank", CreatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, LastUpdatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 10, BankFullName = "Standard Chartered", BankIdentificationCode = 88427198, BankShortName = "Standard Chatered Bank", CreatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, LastUpdatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 11, BankFullName = "Sterling Bank Plc", BankIdentificationCode = 65002961, BankShortName = "Sterling Bank", CreatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, LastUpdatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 12, BankFullName = "First City Monument Bank Plc", BankIdentificationCode = 48299192, BankShortName = "First City Monument Bank", CreatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, LastUpdatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 13, BankFullName = "Heritage Banking Company Limited", BankIdentificationCode = 15094290, BankShortName = "Heritage Bank", CreatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, LastUpdatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 14, BankFullName = "Keystone Bank Limited", BankIdentificationCode = 32404055, BankShortName = "Keystone Bank", CreatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, LastUpdatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 15, BankFullName = "Wema Bank Plc", BankIdentificationCode = 88387850, BankShortName = "Wema Bank", CreatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, LastUpdatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("BankTwoAPI_Entities.Models.CardRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CardType");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CustomerAccountId");

                    b.Property<string>("CustomerAccountNumber");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.HasIndex("CustomerAccountId");

                    b.ToTable("CardRequests");
                });

            modelBuilder.Entity("BankTwoAPI_Entities.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CustomerAccountNumber");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("LastUpdatedAt");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PasswordSalt");

                    b.Property<string>("UserName");

                    b.Property<int>("VerificationCode");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BankTwoAPI_Entities.Models.CustomerAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AccountBalance");

                    b.Property<int>("AccountType");

                    b.Property<string>("BVNNumber");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CustomerAccountNumber");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("LastUpdatedAt");

                    b.Property<string>("OtherNames");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Surname");

                    b.Property<int>("TransactionPin");

                    b.HasKey("Id");

                    b.ToTable("CustomerAccounts");
                });

            modelBuilder.Entity("BankTwoAPI_Entities.Models.CustomerBeneficiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CustomerAccountNumber");

                    b.Property<int>("CustomerId");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("LastUpdatedAt");

                    b.Property<string>("NickName");

                    b.Property<string>("RecipientAccountName");

                    b.Property<string>("RecipientAccountNumber");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerBeneficiaries");
                });

            modelBuilder.Entity("BankTwoAPI_Entities.Models.CustomerPassport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CustomerAccountId");

                    b.Property<int>("Height");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("LastUpdatedAt");

                    b.Property<int>("Length");

                    b.Property<string>("Name");

                    b.Property<byte[]>("Passport");

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.HasIndex("CustomerAccountId");

                    b.ToTable("CustomerPassports");
                });

            modelBuilder.Entity("BankTwoAPI_Entities.Models.InterBankTransfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BanksId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CustomerAccountId");

                    b.Property<string>("CustomerAccountNumber");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<string>("RecipientAccountName");

                    b.Property<string>("RecipientAccountNumber");

                    b.Property<decimal>("TransferAmount");

                    b.HasKey("Id");

                    b.HasIndex("BanksId");

                    b.HasIndex("CustomerAccountId");

                    b.ToTable("InterBankTransfers");
                });

            modelBuilder.Entity("BankTwoAPI_Entities.Models.IntraBankTransfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CustomerAccountId");

                    b.Property<string>("CustomerAccountNumber");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<string>("RecipientAccountName");

                    b.Property<string>("RecipientAccountNumber");

                    b.Property<int>("RecipientBankId");

                    b.Property<string>("RecipientBankName");

                    b.Property<decimal>("TransferAmount");

                    b.HasKey("Id");

                    b.HasIndex("CustomerAccountId");

                    b.HasIndex("RecipientBankId");

                    b.ToTable("IntraBankTransfers");
                });

            modelBuilder.Entity("BankTwoAPI_Entities.Models.MobileNetworks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("LastUpdatedAt");

                    b.Property<string>("MobileNetworkName");

                    b.Property<int>("NetworkProviderRegistratonCode");

                    b.HasKey("Id");

                    b.ToTable("MobileNetworks");

                    b.HasData(
                        new { Id = 1, CreatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, LastUpdatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), MobileNetworkName = "MTN", NetworkProviderRegistratonCode = 123456789 },
                        new { Id = 2, CreatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, LastUpdatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), MobileNetworkName = "GLO", NetworkProviderRegistratonCode = 123456789 },
                        new { Id = 3, CreatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, LastUpdatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), MobileNetworkName = "AIRTEL", NetworkProviderRegistratonCode = 123456789 },
                        new { Id = 4, CreatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, LastUpdatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), MobileNetworkName = "ETISALAT", NetworkProviderRegistratonCode = 123456789 }
                    );
                });

            modelBuilder.Entity("BankTwoAPI_Entities.Models.AccountCustomerCategory", b =>
                {
                    b.HasOne("BankTwoAPI_Entities.Models.CustomerAccount", "CustomerAccount")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BankTwoAPI_Entities.Models.Customer", "Customer")
                        .WithMany("CustomerAccounts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BankTwoAPI_Entities.Models.AirTimeTopUp", b =>
                {
                    b.HasOne("BankTwoAPI_Entities.Models.CustomerAccount", "CustomerAccount")
                        .WithMany()
                        .HasForeignKey("CustomerAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BankTwoAPI_Entities.Models.MobileNetworks", "MobileNetworks")
                        .WithMany()
                        .HasForeignKey("MobileNetworksId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BankTwoAPI_Entities.Models.CardRequest", b =>
                {
                    b.HasOne("BankTwoAPI_Entities.Models.CustomerAccount", "CustomerAccount")
                        .WithMany()
                        .HasForeignKey("CustomerAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BankTwoAPI_Entities.Models.CustomerBeneficiary", b =>
                {
                    b.HasOne("BankTwoAPI_Entities.Models.Banks", "Banks")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BankTwoAPI_Entities.Models.CustomerAccount", "CustomerAccount")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BankTwoAPI_Entities.Models.CustomerPassport", b =>
                {
                    b.HasOne("BankTwoAPI_Entities.Models.CustomerAccount", "CustomerAccount")
                        .WithMany()
                        .HasForeignKey("CustomerAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BankTwoAPI_Entities.Models.InterBankTransfer", b =>
                {
                    b.HasOne("BankTwoAPI_Entities.Models.Banks", "Banks")
                        .WithMany()
                        .HasForeignKey("BanksId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BankTwoAPI_Entities.Models.CustomerAccount", "CustomerAccount")
                        .WithMany()
                        .HasForeignKey("CustomerAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BankTwoAPI_Entities.Models.IntraBankTransfer", b =>
                {
                    b.HasOne("BankTwoAPI_Entities.Models.CustomerAccount", "CustomerAccount")
                        .WithMany()
                        .HasForeignKey("CustomerAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BankTwoAPI_Entities.Models.Banks", "Banks")
                        .WithMany()
                        .HasForeignKey("RecipientBankId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
